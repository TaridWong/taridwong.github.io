<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Tarid Wongvorachan</title>
    <link>https://taridwong.github.io/</link>
    <atom:link href="https://taridwong.github.io/index.xml" rel="self" type="application/rss+xml"/>
    <description>Blogs about what I learned from my academic lives
</description>
    <generator>Distill</generator>
    <lastBuildDate>Wed, 29 Dec 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Measuring Text Similarity with Movie plot data</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-12-29-movie-similarity</link>
      <description>


&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One characteristic of textual data in the real world setting is that most of them possess meaning that to convey to their intended audience. The meaning of one message could be similar to another when they are crafted for similar purposes. With the right tool, we can identify such similarities and visualize them to extract insights from textual data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data set I will use in this post are movie plot summaries available on IMDb and Wikipedia. Here, I will quantify the similarity of movies based on their plot and separate them into groups before plotting them on a dendrogram to represent how closely the movies are related to each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As always, we will begin by importing necessary modules and dataset.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import modules
import numpy as np
import pandas as pd
import nltk

# Set seed for reproducibility
np.random.seed(5)

# Read in IMDb and Wikipedia movie data (both in the same file)
movies_df = pd.read_csv(&amp;quot;movies.csv&amp;quot;)

print(&amp;quot;Number of movies loaded: %s &amp;quot; % (len(movies_df)))

# Display the data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Number of movies loaded: 100 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;movies_df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    rank  ...                                          imdb_plot
0      0  ...  In late summer 1945, guests are gathered for t...
1      1  ...  In 1947, Andy Dufresne (Tim Robbins), a banker...
2      2  ...  The relocation of Polish Jews from surrounding...
3      3  ...  The film opens in 1964, where an older and fat...
4      4  ...  In the early years of World War II, December 1...
..   ...  ...                                                ...
95    95  ...  Shortly after moving to Los Angeles with his p...
96    96  ...  L.B. &amp;quot;Jeff&amp;quot; Jeffries (James Stewart) recuperat...
97    97  ...  Sights of Vienna, Austria, flash across the sc...
98    98  ...  At the end of an ordinary work day, advertisin...
99    99  ...                                                NaN

[100 rows x 5 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="combine-wikipedia-and-imdb-plot-summaries"&gt;Combine Wikipedia and IMDb plot summaries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The dataset we imported currently contains two columns titled &lt;code&gt;wiki_plot&lt;/code&gt; and &lt;code&gt;imdb_plot&lt;/code&gt;. They are the plot found for the movies on Wikipedia and IMDb, respectively. The text in the two columns is similar, however, they are often written in different tones and thus provide context on a movie in a different manner of linguistic expression. Further, sometimes the text in one column may mention a feature of the plot that is not present in the other column. For example, consider the following plot extracts from &lt;em&gt;The Godfather&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Wikipedia: “On the day of his only daughter’s wedding, Vito Corleone…”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IMDb: “In late summer 1945, guests are gathered for the wedding reception of Don Vito Corleone’s daughter Connie”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While the Wikipedia plot only mentions it is the day of the daughter’s wedding, the IMDb plot also mentions the year of the scene and the name of the daughter. We can combine them to avoid the overheads in computation associated with extra columns to process.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Combine wiki_plot and imdb_plot into a single column
movies_df[&amp;quot;plot&amp;quot;] = movies_df[&amp;quot;wiki_plot&amp;quot;].astype(str) + &amp;quot;\n&amp;quot; + \
                    movies_df[&amp;quot;imdb_plot&amp;quot;].astype(str)
                    
movies_df.head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   rank  ...                                               plot
0     0  ...  On the day of his only daughter&amp;#39;s wedding, Vit...
1     1  ...  In 1947, banker Andy Dufresne is convicted of ...
2     2  ...  In 1939, the Germans move Polish Jews into the...
3     3  ...  In a brief scene in 1964, an aging, overweight...
4     4  ...  It is early December 1941. American expatriate...

[5 rows x 6 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="tokenization"&gt;Tokenization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tokenization is the process by which we break down articles into individual sentences or words, as needed. We can also use the regular expression (Regex) method to remove tokens that are entirely numeric values or punctuation to retain only words with meaning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As an example, we will perform tokenization on a part of Godfather’s plot. Notice that quotation marks and numbers were removed in the output.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Tokenize a paragraph into sentences and store in sent_tokenized
sent_tokenized = [sent for sent in nltk.sent_tokenize(&amp;quot;&amp;quot;&amp;quot;
                        Today (May 19, 2016) is his only daughter&amp;#39;s wedding. 
                        Vito Corleone is the Godfather.
                        &amp;quot;&amp;quot;&amp;quot;)]
                        
# Word Tokenize first sentence from sent_tokenized, save as words_tokenized

words_tokenized = [word for word in nltk.word_tokenize(sent_tokenized[0])]

# Remove tokens that do not contain any letters from words_tokenized
import re

filtered = [word for word in words_tokenized if re.search(&amp;#39;[a-zA-Z]&amp;#39;, word)]

# Display filtered words to observe words after tokenization
filtered&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&amp;#39;Today&amp;#39;, &amp;#39;May&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;his&amp;#39;, &amp;#39;only&amp;#39;, &amp;#39;daughter&amp;#39;, &amp;quot;&amp;#39;s&amp;quot;, &amp;#39;wedding&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="stemming"&gt;Stemming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stemming is the process by which we bring down a word from its different forms to the root word (or to stem). This helps us establish meaning to different forms of the same words without having to deal with each form separately. For example, the words ‘fishing’, ‘fished’, and ‘fisher’ all get stemmed to the word ‘fish’.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consider the following sentences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“Young William Wallace witnesses the treachery of Longshanks” - &lt;em&gt;Gladiator&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“escapes to the city walls only to witness Cicero’s death” - &lt;em&gt;Braveheart&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of building separate dictionary entries for both witnesses and witness, which mean the same thing outside of quantity, stemming them reduces them to ‘wit’.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are different algorithms available for stemming such as the Porter Stemmer and Snowball Stemmer. Here, we will use Snowball Stemmer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import the SnowballStemmer to perform stemming
from nltk.stem.snowball import SnowballStemmer

# Create an English language SnowballStemmer object
stemmer = SnowballStemmer(&amp;quot;english&amp;quot;)

# Print filtered to observe words without stemming
print(&amp;quot;Without stemming: &amp;quot;, filtered)

# Stem the words from filtered and store in stemmed_words&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Without stemming:  [&amp;#39;Today&amp;#39;, &amp;#39;May&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;his&amp;#39;, &amp;#39;only&amp;#39;, &amp;#39;daughter&amp;#39;, &amp;quot;&amp;#39;s&amp;quot;, &amp;#39;wedding&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;stemmed_words = [stemmer.stem(t) for t in filtered]

# Print the stemmed_words to observe words after stemming
print(&amp;quot;After stemming:   &amp;quot;, stemmed_words)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;After stemming:    [&amp;#39;today&amp;#39;, &amp;#39;may&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;his&amp;#39;, &amp;#39;onli&amp;#39;, &amp;#39;daughter&amp;#39;, &amp;quot;&amp;#39;s&amp;quot;, &amp;#39;wed&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="tokenization-and-stemming-together"&gt;Tokenization and Stemming together&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We are now able to tokenize and stem sentences. But we may have to use the two functions repeatedly one after the other to handle a large amount of data, hence we can think of wrapping them in a function and passing the text to be tokenized and stemmed as the function argument. Then we can pass the new wrapping function, which shall perform both tokenizing and stemming instead of just tokenizing, as the tokenizer argument while creating the TF-IDF vector of the text (we will get there to what TF-IDF means).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All the words are in their root form, which will lead to a better establishment of meaning as some of the non-root forms may not be present in the NLTK training corpus.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Define a function to perform both stemming and tokenization
def tokenize_and_stem(text):
    
    # Tokenize by sentence, then by word
    tokens = [word for sent in nltk.sent_tokenize(text) for word in nltk.word_tokenize(sent)]
    
    # Filter out raw tokens to remove noise
    filtered_tokens = [token for token in tokens if re.search(&amp;#39;[a-zA-Z]&amp;#39;, token)]
    
    # Stem the filtered_tokens
    stems = [stemmer.stem(t) for t in filtered_tokens]
    
    return stems

words_stemmed = tokenize_and_stem(&amp;quot;Today (May 19, 2016) is his only daughter&amp;#39;s wedding.&amp;quot;)
print(words_stemmed)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&amp;#39;today&amp;#39;, &amp;#39;may&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;his&amp;#39;, &amp;#39;onli&amp;#39;, &amp;#39;daughter&amp;#39;, &amp;quot;&amp;#39;s&amp;quot;, &amp;#39;wed&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="create-tf-idf-vectorizer"&gt;Create TF-IDF Vectorizer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Computers do not &lt;em&gt;understand&lt;/em&gt; text. These are machines only capable of understanding numbers and performing numerical computation. Hence, we must convert our textual plot summaries to numbers for the computer to be able to extract meaning from them. One simple method of doing this would be to count all the occurrences of each word in the entire vocabulary and return the counts in a vector. This method is called &lt;code&gt;CountVectorizer.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consider the word ‘the’. It appears quite frequently in almost all movie plots and will have a high count in each case. However, “the” could hardly be counted as the movie plot itself. For that, &lt;a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;Term Frequency-Inverse Document Frequency&lt;/a&gt; (TF-IDF) is one method that overcomes the shortcomings of &lt;code&gt;CountVectorizer&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In TF-IDF, frequency of a word is the measure of how often it appears in a document, while the Inverse Document Frequency is the parameter which reduces the importance of a word if it frequently appears in several documents. In simplest terms, TF-IDF recognizes words which are unique and important to any given document.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import TfidfVectorizer to create TF-IDF vectors
from sklearn.feature_extraction.text import TfidfVectorizer

# Instantiate TfidfVectorizer object with stopwords and tokenizer
# parameters for efficient processing of text
tfidf_vectorizer = TfidfVectorizer(max_df=0.8, max_features=200000,
                                 min_df=0.2, stop_words=&amp;#39;english&amp;#39;,
                                 use_idf=True, tokenizer=tokenize_and_stem,
                                 ngram_range=(1,3))&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="fit-transform-tf-idf-vectorizer"&gt;Fit transform TF-IDF Vectorizer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once we create a TF-IDF Vectorizer, we must fit the text to it and then transform the text to produce the corresponding numeric form of the data which the computer will be able to understand and derive meaning from. To do this, we use the &lt;code&gt;fit_transform()&lt;/code&gt; method of the &lt;code&gt;TfidfVectorizer&lt;/code&gt; object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the TF-IDF object, there is a parameter called &lt;code&gt;stopwords&lt;/code&gt;. Stopwords are those words in a given text which do not contribute considerably towards the meaning of the sentence and are generally grammatical filler words. For example, in the sentence ‘Dorothy Gale lives with her dog Toto on the farm of her Aunt Em and Uncle Henry’, we could drop the words ‘her’ and ‘the’, and still have a similar overall meaning to the sentence. Thus, ‘her’ and ‘the’ are stopwords and can be conveniently dropped from the sentence.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On setting the stopwords to ‘english’, we direct the vectorizer to drop all stopwords from a pre-defined list of English language stopwords present in the nltk module. Another parameter, &lt;code&gt;ngram_range&lt;/code&gt;, defines the length of the ngrams to be formed while vectorizing the text.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Fit and transform the tfidf_vectorizer with the &amp;quot;plot&amp;quot; of each movie
# to create a vector representation of the plot summaries
tfidf_matrix = tfidf_vectorizer.fit_transform([x for x in movies_df[&amp;quot;plot&amp;quot;]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\tarid\AppData\Roaming\Python\Python38\site-packages\sklearn\feature_extraction\text.py:383: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens [&amp;#39;abov&amp;#39;, &amp;#39;afterward&amp;#39;, &amp;#39;alon&amp;#39;, &amp;#39;alreadi&amp;#39;, &amp;#39;alway&amp;#39;, &amp;#39;ani&amp;#39;, &amp;#39;anoth&amp;#39;, &amp;#39;anyon&amp;#39;, &amp;#39;anyth&amp;#39;, &amp;#39;anywher&amp;#39;, &amp;#39;becam&amp;#39;, &amp;#39;becaus&amp;#39;, &amp;#39;becom&amp;#39;, &amp;#39;befor&amp;#39;, &amp;#39;besid&amp;#39;, &amp;#39;cri&amp;#39;, &amp;#39;describ&amp;#39;, &amp;#39;dure&amp;#39;, &amp;#39;els&amp;#39;, &amp;#39;elsewher&amp;#39;, &amp;#39;empti&amp;#39;, &amp;#39;everi&amp;#39;, &amp;#39;everyon&amp;#39;, &amp;#39;everyth&amp;#39;, &amp;#39;everywher&amp;#39;, &amp;#39;fifti&amp;#39;, &amp;#39;forti&amp;#39;, &amp;#39;henc&amp;#39;, &amp;#39;hereaft&amp;#39;, &amp;#39;herebi&amp;#39;, &amp;#39;howev&amp;#39;, &amp;#39;hundr&amp;#39;, &amp;#39;inde&amp;#39;, &amp;#39;mani&amp;#39;, &amp;#39;meanwhil&amp;#39;, &amp;#39;moreov&amp;#39;, &amp;#39;nobodi&amp;#39;, &amp;#39;noon&amp;#39;, &amp;#39;noth&amp;#39;, &amp;#39;nowher&amp;#39;, &amp;#39;onc&amp;#39;, &amp;#39;onli&amp;#39;, &amp;#39;otherwis&amp;#39;, &amp;#39;ourselv&amp;#39;, &amp;#39;perhap&amp;#39;, &amp;#39;pleas&amp;#39;, &amp;#39;sever&amp;#39;, &amp;#39;sinc&amp;#39;, &amp;#39;sincer&amp;#39;, &amp;#39;sixti&amp;#39;, &amp;#39;someon&amp;#39;, &amp;#39;someth&amp;#39;, &amp;#39;sometim&amp;#39;, &amp;#39;somewher&amp;#39;, &amp;#39;themselv&amp;#39;, &amp;#39;thenc&amp;#39;, &amp;#39;thereaft&amp;#39;, &amp;#39;therebi&amp;#39;, &amp;#39;therefor&amp;#39;, &amp;#39;togeth&amp;#39;, &amp;#39;twelv&amp;#39;, &amp;#39;twenti&amp;#39;, &amp;#39;veri&amp;#39;, &amp;#39;whatev&amp;#39;, &amp;#39;whenc&amp;#39;, &amp;#39;whenev&amp;#39;, &amp;#39;wherea&amp;#39;, &amp;#39;whereaft&amp;#39;, &amp;#39;wherebi&amp;#39;, &amp;#39;wherev&amp;#39;, &amp;#39;whi&amp;#39;, &amp;#39;yourselv&amp;#39;] not in stop_words.
  warnings.warn(&amp;#39;Your stop_words may be inconsistent with &amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;print(tfidf_matrix.shape)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(100, 564)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="import-k-means-and-create-clusters"&gt;Import K-Means and create clusters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To determine how closely one movie is related to the other by the help of unsupervised machine learning, we can use clustering techniques. Clustering is the method of grouping together a number of items such that they exhibit similar properties. According to the measure of similarity desired, a given sample of items can have one or more clusters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A good basis of clustering in our data set could be the genre of the movies. Say we could have a cluster ‘0’ which holds movies of the ‘Drama’ genre, and ‘1’ for the ‘Adventure’ genre.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;K-means is an algorithm which helps us to implement clustering in Python. The name derives from its method of implementation: the given sample is divided into &lt;strong&gt;&lt;em&gt;K&lt;/em&gt;&lt;/strong&gt; clusters where each cluster is denoted by the &lt;strong&gt;&lt;em&gt;mean&lt;/em&gt;&lt;/strong&gt; of all the items lying in that cluster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here, we will examine how many movies we have in each of the five clusters we specified; then, we will visualize them with a category plot.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import k-means to perform clustering
from sklearn.cluster import KMeans

# Create a KMeans object with 5 clusters and save as km
km = KMeans(n_clusters=5)

# Fit the k-means object with tfidf_matrix
km.fit(tfidf_matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;KMeans(n_clusters=5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;clusters = km.labels_.tolist()

# Create a column cluster to denote the generated cluster for each movie
movies_df[&amp;quot;cluster&amp;quot;] = clusters

# Display number of films per cluster (clusters from 0 to 4)
movies_df[&amp;#39;cluster&amp;#39;].value_counts() &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3    31
1    27
0    22
4    13
2     7
Name: cluster, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;import seaborn as sns
import matplotlib.pyplot as plt

#convert the cluster list into a dataframe
clusters_df = pd.DataFrame(clusters, columns = [&amp;#39;cluster_group&amp;#39;])

sns.set_theme(style=&amp;quot;whitegrid&amp;quot;)
sns.catplot(x=&amp;quot;cluster_group&amp;quot;, kind=&amp;quot;count&amp;quot;, data=clusters_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid object at 0x000000006C264A90&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="calculate-similarity-distance"&gt;Calculate similarity distance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;By using &lt;code&gt;countvectorizer&lt;/code&gt;, we can turn a sentence into numbers for the computer to calculate similarity distance with the cosine similarity measurement (it is basically a number that indicates how closely related the two sets of words are).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import cosine_similarity to calculate similarity of movie plots
from sklearn.metrics.pairwise import cosine_similarity

# Calculate the similarity distance
similarity_distance = 1 - cosine_similarity(tfidf_matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="import-matplotlib-linkage-and-dendrograms"&gt;Import Matplotlib, Linkage, and Dendrograms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We will then create a dendrogram of the movie title based on its plot similarity to visualize the level of similarity between our data points.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dendrograms help visualize the results of hierarchical clustering, which is an alternative to k-means clustering. Two pairs of movies at the same level of hierarchical clustering are expected to have similar strength of similarity between the corresponding pairs of movies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The more similar the two movies are, the closer they will be together as they travel down the dendrogram path. The plot is a little large to accommodate the number of data points, so you might need to zoom in to see which movie is similar to which.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import modules necessary to plot dendrogram
from scipy.cluster.hierarchy import linkage, dendrogram

# Create mergings matrix 
mergings = linkage(similarity_distance, method=&amp;#39;complete&amp;#39;)

# Plot the dendrogram, using title as label column
dendrogram_ = dendrogram(mergings,
               labels=[x for x in movies_df[&amp;quot;title&amp;quot;]],
               leaf_rotation=90,
               leaf_font_size=16,
)

# Adjust the plot
fig = plt.gcf()
_ = [lbl.set_color(&amp;#39;r&amp;#39;) for lbl in plt.gca().get_xmajorticklabels()]
fig.set_size_inches(120, 50)

# Show the plotted dendrogram
plt.grid(False)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd447cc19ff_files/figure-html/unnamed-chunk-13-1.png" width="11520" /&gt;&lt;/p&gt;
&lt;h2 id="concluding-remark"&gt;Concluding remark&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While I am not an expert in movie critique, the movie plot data is a good venue to practice text cleaning with tokenization and stemming. The TF-IDF method is also widely implemented to extract meaningful information from textual data in general. Lastly, clustering is also a useful exploratory machine learning method to gain insights from unlabeled data to inform our decisions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This post combines both Narutal Language Processing and Machine Learning techniques to calculate similarity score between sets of words. This method can be used to establish a groundwork for a recommendation system that we often seen in popular sites such as Netflix or Spotify by grouping movies or musics together to recommend them to users. As always, thank you very much for reading!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>97ed681d6820c89f6bb644175087be55</distill:md5>
      <category>Python</category>
      <category>Natural Language Processing</category>
      <category>Unsupervised Machine Learning</category>
      <guid>https://taridwong.github.io/posts/2021-12-29-movie-similarity</guid>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://taridwong.github.io/posts/2021-12-29-movie-similarity/movie-similarity_files/figure-html5/unnamed-chunk-11-1.png" medium="image" type="image/png" width="484" height="483"/>
    </item>
    <item>
      <title>Missing Data Analysis</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-12-27-missingdata</link>
      <description>


&lt;h2 id="looking-for-what-that-is-not-there"&gt;Looking for what that is not there&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“If I had eight hours to chop down a tree, I’d spend six sharpening my axe.” - Abraham Lincoln via &lt;a href="https://www.guilford.com/books/Principles-and-Practice-of-Structural-Equation-Modeling/Rex-Kline/9781462523344"&gt;Kline (2016)&lt;/a&gt;. This adage is appropriate to set the tone for this post, as well as applicable to most things in general, including working with data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My professors taught me that real data never works, and my experience attested to their statement countless times as I iterated over the data work procedure of importing, cleaning, model building, model tuning, and communicating results. One thing about it that I used to find frustrating is the data I got if oftentimes incomplete (or partly missing).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Missing data are values that should have been recorded but were not. The best way to treat missing data is not to have them, but unfortunately, real data is oftentimes &lt;del&gt;ugly&lt;/del&gt; unorganized. Missing data could potentially caused by nonresponse in surveys, or technical issues with data-collecting equipment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My previous posts were about visualizing data that we have, but this time, we will be visualizing things that we ‘do not’ have (aka missing data), as well as discussing about ways we can deal with them via complete case analysis or imputation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure"&gt;
&lt;img src="https://taridwong.github.io//posts/2021-12-27-missingdatamissingpic.jpg" style="width:40.0%" alt="" /&gt;
&lt;p class="caption"&gt;Photo by Adam Lingelbach&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="import-and-read-the-data-set"&gt;Import and read the data set&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;As usual, we will begin by importing essential libraries and load in the data set to preprocess it.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(foreign) #To read SPSS data
library(tidyverse) #datawork toolbox
library(dlookr) #for missing data diagnosis
library(visdat) #for overall missingness visualization
library(naniar) #for missingness visualization
library(VIM) #for donor-based imputation
library(simputation) #for model-based imputation
library(mice) #for multiple imputation&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;#Import the data set
PISA_CAN &amp;lt;-read.spss(&amp;quot;PISA2018CAN.sav&amp;quot;,to.data.frame = TRUE, use.value.labels = FALSE)

#Subset and rename the variables
PISA_Subsetted &amp;lt;-  PISA_CAN %&amp;gt;% 
  select(REPEAT, FEMALE = ST004D01T, ESCS, DAYSKIP = ST062Q01TA,
         CLASSSKIP = ST062Q02TA, LATE = ST062Q03TA,
         BEINGBULLIED, DISCLIMA, ADAPTIVITY)

#Recode variables into factor
PISA_Subsetted$DAYSKIP &amp;lt;-as.factor(PISA_Subsetted$DAYSKIP)
PISA_Subsetted$CLASSSKIP &amp;lt;-as.factor(PISA_Subsetted$CLASSSKIP)
PISA_Subsetted$LATE &amp;lt;-as.factor(PISA_Subsetted$LATE)
PISA_Subsetted$FEMALE &amp;lt;-as.factor(PISA_Subsetted$FEMALE)
PISA_Subsetted$REPEAT &amp;lt;-as.factor(PISA_Subsetted$REPEAT)

# Renaming factor levels with dplyr
PISA_Subsetted$FEMALE &amp;lt;- recode_factor(PISA_Subsetted$FEMALE, 
                                       &amp;quot;1&amp;quot; = &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot; = &amp;quot;0&amp;quot;)

glimpse(PISA_Subsetted)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 22,653
Columns: 9
$ REPEAT       &amp;lt;fct&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~
$ FEMALE       &amp;lt;fct&amp;gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,~
$ ESCS         &amp;lt;dbl&amp;gt; -0.7302, 0.3078, 0.5059, 1.1147, 1.3626, -0.857~
$ DAYSKIP      &amp;lt;fct&amp;gt; 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2,~
$ CLASSSKIP    &amp;lt;fct&amp;gt; 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 1, 1, 2, 2, 2,~
$ LATE         &amp;lt;fct&amp;gt; 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 3,~
$ BEINGBULLIED &amp;lt;dbl&amp;gt; 1.2618, 1.7669, 0.1462, -0.7823, 0.2907, 0.7703~
$ DISCLIMA     &amp;lt;dbl&amp;gt; -0.4186, -1.4179, 0.6019, -0.4995, -0.1045, 1.0~
$ ADAPTIVITY   &amp;lt;dbl&amp;gt; -0.4708, 0.6350, -0.5786, -0.5786, -0.0763, 0.5~&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The data set in this post was a Canadian student data subsetted from the Programme for Internal Student Assessment (PISA), which is an international assessment that measures 15-year-old students’ reading, mathematics, and science literacy every three years.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the &lt;code&gt;glimpse&lt;/code&gt; call above, our dataset has 9 variables and 22,653 data points.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="check-for-missing-data"&gt;Check for missing data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, we will use the &lt;code&gt;dlookr&lt;/code&gt; package to diagnose missingness of the data set, as well as plot missing data map with &lt;code&gt;vis_miss&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The plot provides a specific visualization of the amount of missing data, showing in black the location of missing values, and also providing information on the overall percentage of missing values overall (in the legend), and in each variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;dlookr::diagnose(PISA_Subsetted)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 9 x 6
  variables    types   missing_count missing_percent unique_count
  &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt;           &amp;lt;dbl&amp;gt;        &amp;lt;int&amp;gt;
1 REPEAT       factor           1926         8.50               3
2 FEMALE       factor              2         0.00883            3
3 ESCS         numeric          1163         5.13           15366
4 DAYSKIP      factor           3341        14.7                5
5 CLASSSKIP    factor           3330        14.7                5
6 LATE         factor           3316        14.6                5
7 BEINGBULLIED numeric          3833        16.9               63
8 DISCLIMA     numeric          1300         5.74             934
9 ADAPTIVITY   numeric          2197         9.70              65
# ... with 1 more variable: unique_rate &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;visdat::vis_miss(PISA_Subsetted, sort_miss = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-5-1.png" width="672" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If we are curious about the proportion of missing data by groups, we can also group the dataset by our categorical variable of interest, say, gender, before examining the missingness ratio.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_Subsetted %&amp;gt;% group_by (FEMALE) %&amp;gt;%
  miss_var_summary()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 24 x 4
# Groups:   FEMALE [3]
   FEMALE variable     n_miss pct_miss
   &amp;lt;fct&amp;gt;  &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
 1 1      BEINGBULLIED   1651    14.6 
 2 1      DAYSKIP        1451    12.8 
 3 1      CLASSSKIP      1445    12.8 
 4 1      LATE           1430    12.6 
 5 1      ADAPTIVITY      907     8.02
 6 1      REPEAT          812     7.18
 7 1      DISCLIMA        563     4.98
 8 1      ESCS            527     4.66
 9 0      BEINGBULLIED   2180    19.2 
10 0      DAYSKIP        1888    16.6 
# ... with 14 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="types-of-missing-data"&gt;Types of Missing Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Yes, we know now that our data is missing, but not all missing data are created (or not created, pun wholeheartedly intended) equal. There are three types of missing data, MCAR, MAR, and MNAR.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Missing Completely at Random (MCAR)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Locations of missing values in the dataset are purely random. they do not depend on any other data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, if a doctor forgets to record the age of every tenth patient entering an ICU, the presence of missing value would not depend on the characteristic of the patients.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Missing at Random (MAR)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Locations of missing values in the dataset depend on some other, observed data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data are considered as MAR if the probability of missingness is unrelated to the actual value on that variable after controlling for the other variables in the dataset&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In survey data, high-income respondents are less likely to inform the researcher about the number of properties owned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Below is an example of MAR missingness. See that &lt;code&gt;sea_temp&lt;/code&gt; and &lt;code&gt;air_temp&lt;/code&gt; are missing at a certain part of the year. Maybe the measuring tools broke down or something before they got them fixed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;oceanbuoys %&amp;gt;% arrange(year) %&amp;gt;% vis_miss()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-7-1.png" width="672" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Missing Not at Random (MNAR)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If it is not MCAR or MAR, it is probably MNAR. This is the most tricky type of missingness to handle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The missing values depend on both characteristics of the data and also on missing values. In this case, determining the mechanism of the generation of missing value is difficult.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Missing values for a variable like blood pressure may partially depend on the values of blood pressure as patients who have low blood pressure are less likely to get their blood pressure checked at frequently.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="visualize-missing-data"&gt;Visualize Missing data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Okay, now we know what missing data is, and what are types of missing data, here are some ways we can visualize them so that we know their patterns and what they are up to.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="missing-pattern-wupset-plot"&gt;Missing pattern w/Upset plot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;An upset plot from the &lt;code&gt;UpSetR&lt;/code&gt; package can be used to visualize the patterns of missingness, or rather the combinations of missingness across cases and variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;gg_miss_upset(PISA_Subsetted, nsets = 9, nintersects = 15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-8-1.png" width="672" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The small bar plot to the left indicated the amount of missingness in variables. Consistent with the missingness diagnosis, the variable &lt;code&gt;BEINGBULLIED&lt;/code&gt; has the most missing data, following by &lt;code&gt;DAYSKIP&lt;/code&gt; and &lt;code&gt;CLASSKIP&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The dot plot to the right showed combinations of variable that are missing in the data set. For example, there are 1,234 cases that have missing data in the variable &lt;code&gt;LATE&lt;/code&gt;, &lt;code&gt;CLASSKIP&lt;/code&gt;, &lt;code&gt;DAYSKIP&lt;/code&gt;, and &lt;code&gt;BEINGBULLIED&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The parameter &lt;code&gt;nsets&lt;/code&gt; looks at 9 sets of variables, while the parameter &lt;code&gt;nintersects&lt;/code&gt; looks at 15 variable combinations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="general-visual-summaries-of-missing-data"&gt;General visual summaries of missing data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This section demonstrates numerous ways to visualize missing data to determine their patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="missingness-in-variables-with-gg_miss_var"&gt;Missingness in variables with &lt;code&gt;gg_miss_var&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This plot shows the number of missing values in each variable in a dataset.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_Subsetted %&amp;gt;% miss_var_table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 9 x 3
  n_miss_in_var n_vars pct_vars
          &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
1             2      1     11.1
2          1163      1     11.1
3          1300      1     11.1
4          1926      1     11.1
5          2197      1     11.1
6          3316      1     11.1
7          3330      1     11.1
8          3341      1     11.1
9          3833      1     11.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;gg_miss_var(PISA_Subsetted, show_pct = TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-9-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h4 id="missingness-in-cases-with-gg_miss_case"&gt;Missingness in cases with &lt;code&gt;gg_miss_case&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This plot shows the number of missing values in each case. For example, the table showed that there are 2 cases with 9 missing variables (i.e., no data in all variables), and there are 1050 cases with 8 missing variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_Subsetted %&amp;gt;% miss_case_table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 10 x 3
   n_miss_in_case n_cases pct_cases
            &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
 1              0   18327  80.9    
 2              1     870   3.84   
 3              2     140   0.618  
 4              3      81   0.358  
 5              4    1254   5.54   
 6              5      83   0.366  
 7              6     756   3.34   
 8              7      90   0.397  
 9              8    1050   4.64   
10              9       2   0.00883&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;gg_miss_case(PISA_Subsetted)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-10-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h4 id="missingness-across-factors-with-gg_miss_fct"&gt;Missingness across factors with &lt;code&gt;gg_miss_fct&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This plot shows the number of missingness in each column, broken down by a categorical variable from the dataset.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;gg_miss_fct(x = PISA_Subsetted, fct = REPEAT) + 
  labs(title = &amp;quot;Missing data by the History of Class Repetition&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-11-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;gg_miss_fct(x = PISA_Subsetted, fct = LATE) + 
  labs(title = &amp;quot;Missing data by Lateness History&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-11-2.png" width="672" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The heatmap above showed the proportion of missing data we have in each response of the selected categorical variable; for example, the history of class repetition (&lt;code&gt;REPEAT&lt;/code&gt;), with &lt;code&gt;0&lt;/code&gt; as no, &lt;code&gt;1&lt;/code&gt; as yes, and &lt;code&gt;NA&lt;/code&gt; as missing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="missingness-along-a-repeating-span-with-gg_miss_span"&gt;Missingness along a repeating span with &lt;code&gt;gg_miss_span&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This plot showed the number of missings in a given span, or breaksize, for a single selected variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;gg_miss_span(PISA_Subsetted, REPEAT, span_every = 2000) +
  theme_dark()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-12-1.png" width="672" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The plot went over the data and showed us how many missing data we have every 2000 data points that it went through.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cumulative-missing"&gt;Cumulative missing&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This plot showed the cumulative amount of missing value over the data set. A sharp increase in cumulative missing value could indicate missing patterns to be discovered.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_Subsetted %&amp;gt;% gg_miss_case_cumsum(breaks = 2000) + theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-13-1.png" width="672" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This plot showed the cumulative amount of missing value over the variable. We could examine the relative proportion of missing values across variables via this plot.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_Subsetted %&amp;gt;% gg_miss_var_cumsum() + theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-14-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h2 id="what-should-we-do-with-the-missing-data"&gt;What should we do with the missing data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now that we know we have missing data, there are numerous ways we can deal with it such as disregarding them with complete case analysis, or making educated guesses with imputation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anyway, dealing with missing data helps minimizing bias in the data, maximizing the use of available information (We don’t want to throw away any of our hard-earned data), and increasing the chance of getting a good reliability estimates such as standard errors, confidence intervals, and &lt;em&gt;p&lt;/em&gt;-values.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="complete-case-analysis"&gt;Complete Case Analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Listwise deletion&lt;/strong&gt; is the method of deleting all cases with missing value, so that we get a clean and complete data set as a result, at the expense of losing a chunk of data in the process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listwise deletion is often a default way to handle missing data (e.g., SPSS).&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;This often results in losing 20% to 50% of the data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_Listwise &amp;lt;- PISA_Subsetted[complete.cases(PISA_Subsetted), ]
glimpse(PISA_Listwise)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 18,327
Columns: 9
$ REPEAT       &amp;lt;fct&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~
$ FEMALE       &amp;lt;fct&amp;gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,~
$ ESCS         &amp;lt;dbl&amp;gt; -0.7302, 0.3078, 0.5059, 1.1147, 1.3626, -0.857~
$ DAYSKIP      &amp;lt;fct&amp;gt; 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2,~
$ CLASSSKIP    &amp;lt;fct&amp;gt; 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 1, 1, 2, 2, 2,~
$ LATE         &amp;lt;fct&amp;gt; 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 3,~
$ BEINGBULLIED &amp;lt;dbl&amp;gt; 1.2618, 1.7669, 0.1462, -0.7823, 0.2907, 0.7703~
$ DISCLIMA     &amp;lt;dbl&amp;gt; -0.4186, -1.4179, 0.6019, -0.4995, -0.1045, 1.0~
$ ADAPTIVITY   &amp;lt;dbl&amp;gt; -0.4708, 0.6350, -0.5786, -0.5786, -0.0763, 0.5~&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Notice that the size of our dataset got reduced to 18,327 cases. This happaned from deleting all cases with missing value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pairwise deletion&lt;/strong&gt; is the method that deletes cases only if they have missing data on variables involved in a particular computation, so we can still retain the data for other analyses that do not involve variables that are missing. However, the effective sample size can vary from one analysis to another.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a demonstration, we will calculate a covariance matrix using pairwise complete observation method.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;pairwise_var &amp;lt;- c(&amp;quot;BEINGBULLIED&amp;quot;, &amp;quot;DISCLIMA&amp;quot;)
cov(PISA_Subsetted[pairwise_var], use=&amp;quot;pairwise.complete.obs&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;             BEINGBULLIED   DISCLIMA
BEINGBULLIED    1.1315670 -0.1982891
DISCLIMA       -0.1982891  1.1373620&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HOWEVER&lt;/strong&gt;, the bias caused by using listwise/pairwise deletion has been shown in simulations to grossly exaggerate or underestimate some effects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Despite giving valid estimates when data are MCAR, the statistical power will be severely reduced when there is a lot of missingness. If the missingness is MAR or MNAR, removing them introduces bias to models built on these data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="missing-data-imputation"&gt;Missing Data Imputation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Other than disregarding them, we can replace the missing value with our best guess with imputation. There are three approaches we can use, donor-based imputation, model-based imputation, and multiple imputation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="donor-based-imputation"&gt;Donor-based imputation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Donor-based imputation replaces missing values based on other complete observations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="mean-imputation"&gt;Mean Imputation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mean imputation replaces all missing values with the mean of that variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First, we will create a binary indicator for whether each value was originally missing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_meanimp &amp;lt;- PISA_Subsetted %&amp;gt;%
  mutate(DISCLIMA_imp = ifelse(is.na(DISCLIMA), TRUE, FALSE)) %&amp;gt;%
  mutate(ADAPTIVITY_imp = ifelse(is.na(ADAPTIVITY), TRUE, FALSE))

PISA_meanimp[c(&amp;quot;DISCLIMA_imp&amp;quot;,&amp;quot;ADAPTIVITY_imp&amp;quot;)] %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  DISCLIMA_imp ADAPTIVITY_imp
1        FALSE          FALSE
2        FALSE          FALSE
3        FALSE          FALSE
4        FALSE          FALSE
5        FALSE          FALSE
6        FALSE          FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Replace missing values in DISCLIMA and ADAPTIVITY variables with their respective means.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_meanimp &amp;lt;- PISA_meanimp %&amp;gt;%
mutate(DISCLIMA = ifelse(is.na(DISCLIMA), mean(DISCLIMA, na.rm = TRUE), DISCLIMA)) %&amp;gt;%
mutate(ADAPTIVITY = ifelse(is.na(ADAPTIVITY), mean(ADAPTIVITY, na.rm = TRUE), ADAPTIVITY))

PISA_meanimp %&amp;gt;%select(DISCLIMA, ADAPTIVITY, DISCLIMA_imp, ADAPTIVITY_imp) %&amp;gt;%
head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  DISCLIMA ADAPTIVITY DISCLIMA_imp ADAPTIVITY_imp
1  -0.4186    -0.4708        FALSE          FALSE
2  -1.4179     0.6350        FALSE          FALSE
3   0.6019    -0.5786        FALSE          FALSE
4  -0.4995    -0.5786        FALSE          FALSE
5  -0.1045    -0.0763        FALSE          FALSE
6   1.0832     0.5464        FALSE          FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We can try plotting the data on a margin plot to see the result of our mean imputation.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_meanimp %&amp;gt;% select(DISCLIMA, ADAPTIVITY, DISCLIMA_imp, ADAPTIVITY_imp) %&amp;gt;% marginplot(delimiter=&amp;quot;imp&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2bd459eb717c_files/figure-html/unnamed-chunk-19-1.png" width="672" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can see that all missing values were replaced by the mean of that variable. Yes, we got the data back, but what did it cost?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mean imputation destroys relationship between variables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Models predicting one using the other will be fooled by the outlying imputed values and will produce biased results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mean imputation &lt;del&gt;crushes&lt;/del&gt; takes away variance in the data, which could potentially underestimate all standard errors. This prevents reliable hypothesis testing and calculating confidence interval.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This method is not generally recommended, but to each their own. Use it at your own discretion. With the right justification from the literature, mean imputation can be a viable method in your analysis as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="k-nearest-neighborknn-imputation"&gt;K-Nearest Neighbor(kNN) Imputation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For kNN imputation, we identify ‘k’ samples in the dataset that are similar or close in the space. Then we use these ‘k’ samples to estimate the value of the missing data points.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basically, it is like you have a data point with missing values asks its neighbors what value do they have on the variable that it is missing. That data point then replace its missing values with the value of its nearest neighbor.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_kNNimp &amp;lt;- VIM::kNN(PISA_Subsetted, k = 6, variable = c(&amp;quot;DISCLIMA&amp;quot;, &amp;quot;ADAPTIVITY&amp;quot;))

PISA_kNNimp[c(&amp;quot;DISCLIMA&amp;quot;, &amp;quot;ADAPTIVITY&amp;quot;,&amp;quot;DISCLIMA_imp&amp;quot;,&amp;quot;ADAPTIVITY_imp&amp;quot;)] %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  DISCLIMA ADAPTIVITY DISCLIMA_imp ADAPTIVITY_imp
1  -0.4186    -0.4708        FALSE          FALSE
2  -1.4179     0.6350        FALSE          FALSE
3   0.6019    -0.5786        FALSE          FALSE
4  -0.4995    -0.5786        FALSE          FALSE
5  -0.1045    -0.0763        FALSE          FALSE
6   1.0832     0.5464        FALSE          FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Note that there are two more columns added, DISCLIMA_imp and ADAPTIVITY_imp. The two added columns tell us if our variables of interest were imputed with the kNN method or not, with &lt;code&gt;TRUE&lt;/code&gt; indicates that the value was imputed and &lt;code&gt;FALSE&lt;/code&gt; indicates otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="model-based-imputation"&gt;Model-based imputation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For model-based imputation, missing values are predicted with a statistical or machine learning model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The model that we used depends on the type of the missing variable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continuous variables - linear regression&lt;/li&gt;
&lt;li&gt;Binary variables - logistic regression&lt;/li&gt;
&lt;li&gt;Categorical variables - multinomial logistic regression&lt;/li&gt;
&lt;li&gt;Count variables - Poisson regression&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="linear-regression-imputation"&gt;Linear Regression Imputation&lt;/h5&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_lmreg &amp;lt;- impute_lm(PISA_Subsetted, DISCLIMA + ADAPTIVITY ~.)

PISA_lmreg %&amp;gt;% 
  is.na() %&amp;gt;%
  colSums()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;      REPEAT       FEMALE         ESCS      DAYSKIP    CLASSSKIP 
        1926            2         1163         3341         3330 
        LATE BEINGBULLIED     DISCLIMA   ADAPTIVITY 
        3316         3833         1278         2056 &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Notice that we have managed to impute some cases of &lt;code&gt;DISCLIMA&lt;/code&gt; and &lt;code&gt;ADAPTIVITY&lt;/code&gt; based on the availability of other variables in the same case. However, if there is no other variable on that case (i.e., complete missing), the model won’t be able to predict the target value as there is no predictor available.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="logistic-regression-imputation"&gt;Logistic Regression Imputation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Logistic regression imputation is similar to linear regression imputation, with a difference in the nature of missing value (Continuous vs Binary).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;missing_REPEAT &amp;lt;- is.na(PISA_Subsetted$REPEAT)
head(missing_REPEAT, 20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[12] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_logregimp &amp;lt;- PISA_Subsetted

logreg_model &amp;lt;- glm(REPEAT ~ DAYSKIP + BEINGBULLIED + ESCS,
                data = PISA_Subsetted, family = binomial)


preds &amp;lt;- predict(logreg_model, type = &amp;quot;response&amp;quot;)

preds &amp;lt;- ifelse(preds &amp;gt;= 0.5, 1, 0)

PISA_logregimp[missing_REPEAT, &amp;quot;REPEAT&amp;quot;] &amp;lt;- preds[missing_REPEAT]


table(preds[missing_REPEAT])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
   0    1 
1669    1 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;table(PISA_Subsetted$REPEAT)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
    0     1 
19575  1152 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_logregimp %&amp;gt;% 
  is.na() %&amp;gt;%
  colSums()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;      REPEAT       FEMALE         ESCS      DAYSKIP    CLASSSKIP 
         256            2         1163         3341         3330 
        LATE BEINGBULLIED     DISCLIMA   ADAPTIVITY 
        3316         3833         1300         2197 &lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="multiple-imputation-by-chained-equation"&gt;Multiple Imputation by Chained Equation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Multiple Imputation by Chained Equation (MICE) - also known as sequential regression multiple imputation - is an emerging method in dealing with missing values by implementing the imputation multiple times as opposed to the single imputation methods mentioned above &lt;a href="https://onlinelibrary.wiley.com/doi/10.1002/mpr.329"&gt;(Azur et al., 2011)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With the right model, MICE was found to be effective in reducing bias, especially in a large data set with MCAR and MAR. The method basically imputed the missing value with a statistical model (say, linear regression) multiple times for different imputed values before pooling the results together for the final most likely value that the algorithm can come up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The package &lt;code&gt;mice&lt;/code&gt; has several statistics and machine learning models we can use such as Predictive mean matching (pmm), Classification and Regression Tree (cart), and Random Forest Imputation (rf). Keep in mind that it is a best practice to justify our selected model in missing data imputation to make the analysis as less ‘black box’ as possible for explainability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For this post, I will use the predictive mean matchmaking method that calculates the predicted value from a randomly drawn set of candidate donors that have the value closest to the missing entry. The assumption is the distribution of the missing cell is the same as the observed data of the candidate donors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The rationale is that PMM produces little biased estimates when missing data is below 50% and not systematically missing in a large data set &lt;a href="https://stefvanbuuren.name/fimd/sec-pmm.html"&gt;(van Buuren, 2018)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;mice_model &amp;lt;- mice(PISA_Subsetted, method=&amp;#39;pmm&amp;#39;, seed = 123)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
 iter imp variable
  1   1  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  1   2  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  1   3  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  1   4  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  1   5  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  2   1  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  2   2  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  2   3  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  2   4  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  2   5  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  3   1  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  3   2  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  3   3  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  3   4  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  3   5  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  4   1  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  4   2  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  4   3  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  4   4  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  4   5  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  5   1  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  5   2  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  5   3  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  5   4  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY
  5   5  REPEAT  FEMALE  ESCS  DAYSKIP  CLASSSKIP  LATE  BEINGBULLIED  DISCLIMA  ADAPTIVITY&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;PISA_miceimp &amp;lt;- complete(mice_model)

psych::describe(PISA_Subsetted)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;             vars     n  mean   sd median trimmed  mad   min  max
REPEAT*         1 20727  1.06 0.23   1.00    1.00 0.00  1.00 2.00
FEMALE*         2 22651  1.50 0.50   2.00    1.50 0.00  1.00 2.00
ESCS            3 21490  0.38 0.83   0.48    0.41 0.87 -6.69 4.04
DAYSKIP*        4 19312  1.31 0.66   1.00    1.16 0.00  1.00 4.00
CLASSSKIP*      5 19323  1.44 0.76   1.00    1.27 0.00  1.00 4.00
LATE*           6 19337  1.82 0.98   2.00    1.65 1.48  1.00 4.00
BEINGBULLIED    7 18820  0.17 1.06   0.15    0.03 1.38 -0.78 3.86
DISCLIMA        8 21353 -0.12 1.07  -0.04   -0.11 1.00 -2.71 2.03
ADAPTIVITY      9 20456  0.18 1.08   0.19    0.20 0.98 -2.27 2.01
             range  skew kurtosis   se
REPEAT*       1.00  3.88    13.05 0.00
FEMALE*       1.00  0.00    -2.00 0.00
ESCS         10.72 -0.47     0.85 0.01
DAYSKIP*      3.00  2.41     5.80 0.00
CLASSSKIP*    3.00  1.84     2.87 0.01
LATE*         3.00  1.01    -0.06 0.01
BEINGBULLIED  4.64  0.88     0.31 0.01
DISCLIMA      4.75 -0.13     0.16 0.01
ADAPTIVITY    4.27 -0.18    -0.19 0.01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;psych::describe(PISA_miceimp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;             vars     n  mean   sd median trimmed  mad   min  max
REPEAT*         1 22653  1.06 0.23   1.00    1.00 0.00  1.00 2.00
FEMALE*         2 22653  1.50 0.50   2.00    1.50 0.00  1.00 2.00
ESCS            3 22653  0.38 0.83   0.48    0.41 0.86 -6.69 4.04
DAYSKIP*        4 22653  1.32 0.67   1.00    1.17 0.00  1.00 4.00
CLASSSKIP*      5 22653  1.45 0.76   1.00    1.27 0.00  1.00 4.00
LATE*           6 22653  1.83 0.98   2.00    1.66 1.48  1.00 4.00
BEINGBULLIED    7 22653  0.18 1.07   0.15    0.04 1.38 -0.78 3.86
DISCLIMA        8 22653 -0.12 1.07  -0.04   -0.11 1.00 -2.71 2.03
ADAPTIVITY      9 22653  0.17 1.09   0.19    0.20 0.98 -2.27 2.01
             range  skew kurtosis   se
REPEAT*       1.00  3.84    12.74 0.00
FEMALE*       1.00  0.00    -2.00 0.00
ESCS         10.72 -0.47     0.84 0.01
DAYSKIP*      3.00  2.38     5.62 0.00
CLASSSKIP*    3.00  1.83     2.81 0.01
LATE*         3.00  1.00    -0.09 0.01
BEINGBULLIED  4.64  0.88     0.35 0.01
DISCLIMA      4.75 -0.13     0.15 0.01
ADAPTIVITY    4.27 -0.17    -0.20 0.01&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The message above shows that the algorithm went over the data set 5 times per iteration, with the total of 25 times in 5 iterations (5 x 5). In other words, the machine imputed the missing over and over again until the change becomes minimal to give us the most stable replacement value as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no substantial difference in descriptive statistics of the pre-imputed and post imputed data set. Given that we gained 10% of our data back, it is a win for us.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concluding-remark"&gt;Concluding Remark&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data cleaning is a challenging, but necessary, process in data work. That is why it is important for us to know how to identify and deal with missing data appropriately before proceeding further into developing a statistical model and drawing conclusions from it. With a solid data preparation, combining with a thorough literature review, it is likely that we can draw meaningful conclusions from the data to inform our future decisions. The opposite is also true as well for poorly processed data sets. We wouldn’t want to waste our time and resources to know that the conclusion we draw is not well-supported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A bit of controversial topic here. Non-methodologists might have some concerns that we cannot just make up the obtained scores. Like, what if the participants did not answer that question for a reason? How can we be sure that the number we generated will represent characteristics of the targeted population? The million-dollar question is, would you still do this, knowing that the number you generated might have some degree of error? Are you willing to trade authenticity of the data for the data point that might improve your statistical models? It is your task as a researcher and an informed individual to justify your choice in this matter, as well as other choices that you made in your endeavor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anyway, thank you so much for your read as always! Happy Holiday, everyone! I hope you have an awesome break! :)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>9e8924d0fa8f46fafe3590635e32c199</distill:md5>
      <category>R</category>
      <category>Data Visualization</category>
      <category>Statistics</category>
      <guid>https://taridwong.github.io/posts/2021-12-27-missingdata</guid>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://taridwong.github.io/posts/2021-12-27-missingdata/missingpic.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Applying Machine Learning to Audio Data: Visualization, Classification, and Recommendation</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-12-11-applying-machine-learning-to-audio-data</link>
      <description>For this entry, I am trying my hands on audio data to extract its features for exploratory data analysis (EDA), using machine learning algorithms to perform music classification, and finally build up on that result to develop a recommendation system for music of similar characteristics.

(13 min read)</description>
      <category>Python</category>
      <category>Data Visualization</category>
      <category>Supervised Machine Learning</category>
      <guid>https://taridwong.github.io/posts/2021-12-11-applying-machine-learning-to-audio-data</guid>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://taridwong.github.io/posts/2021-12-11-applying-machine-learning-to-audio-data/applying-machine-learning-to-audio-data_files/figure-html5/unnamed-chunk-13-11.png" medium="image" type="image/png" width="3072" height="1152"/>
    </item>
    <item>
      <title>Interactive plots for Suicide Data</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-12-08-interactive-dashboard-for-suicide-data</link>
      <description>For this entry, will be visualizing suicide data from 1958 to 2015 with interactive plots to communicate insights to non-technical audience.  

(14 min read)</description>
      <category>R</category>
      <category>Data Visualization</category>
      <category>Quantitative research</category>
      <guid>https://taridwong.github.io/posts/2021-12-08-interactive-dashboard-for-suicide-data</guid>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://taridwong.github.io/posts/2021-12-08-interactive-dashboard-for-suicide-data/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Image Recognition with Artificial Neural Networks</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-12-07-image-recognition-with-artificial-neural-networks</link>
      <description>In this entry, we will be developing a deep learning algorithm - a sub-field of machine learning inspired by the structure of human brain (neural networks) - to classify images of single digit number (0-9).  

(9 min read)</description>
      <category>Python</category>
      <category>Supervised Machine Learning</category>
      <category>Deep Learning</category>
      <guid>https://taridwong.github.io/posts/2021-12-07-image-recognition-with-artificial-neural-networks</guid>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://taridwong.github.io/posts/2021-12-07-image-recognition-with-artificial-neural-networks/deepnn.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Anomaly Detection with New York City taxi data</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-12-04-anomaly-detection-with-new-york-city-taxi-data</link>
      <description>In this entry, I will be conducting anomaly detection to identify points of anomaly in the taxi passengers data in New York City from July 2014 to January 2015 at half-hourly intervals.
 
 (4 min read)</description>
      <category>Unsupervised Machine Learning</category>
      <category>R</category>
      <guid>https://taridwong.github.io/posts/2021-12-04-anomaly-detection-with-new-york-city-taxi-data</guid>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://taridwong.github.io/posts/2021-12-04-anomaly-detection-with-new-york-city-taxi-data/anomaly-detection-with-new-york-city-taxi-data_files/figure-html5/unnamed-chunk-9-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Crime mapping in San Francisco with police data</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-11-30-crime-mapping-in-san-francisco-with-police-data</link>
      <description>In this entry, we will explore San Francisco crime data from 2016 to 2018 to understand the relationship between civilian-reported incidents of crime and police-reported incidents of crime. Along the way we will use table intersection methods to subset our data, aggregation methods to calculate important statistics, and simple visualizations to understand crime trends.  

(7 min read)</description>
      <category>Data Visualization</category>
      <category>R</category>
      <category>Quantitative research</category>
      <guid>https://taridwong.github.io/posts/2021-11-30-crime-mapping-in-san-francisco-with-police-data</guid>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      <media:content url="https://taridwong.github.io/posts/2021-11-30-crime-mapping-in-san-francisco-with-police-data/crime-mapping-in-san-francisco-with-police-data_files/figure-html5/unnamed-chunk-6-1.png" medium="image" type="image/png" width="1920" height="1920"/>
    </item>
    <item>
      <title>Exploring COVID-19 data from twitter with topic modeling</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-11-18-exploring-covid-19-data-from-twitter-with-word-clouds</link>
      <description>This entry focuses on the exploration of twitter data from Alberta's Chief Medical Officer of Health via word cloud and topic modeling to gain insights in characteristics of public health messaging during the COVID-19 pandemic.  

(7 min read)</description>
      <category>Python</category>
      <category>Natural Language Processing</category>
      <category>Unsupervised Machine Learning</category>
      <category>COVID-19</category>
      <guid>https://taridwong.github.io/posts/2021-11-18-exploring-covid-19-data-from-twitter-with-word-clouds</guid>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
      <media:content url="https://taridwong.github.io/posts/2021-11-18-exploring-covid-19-data-from-twitter-with-word-clouds/word-cloud-pv.png" medium="image" type="image/png" width="1920" height="1920"/>
    </item>
    <item>
      <title>Finding a home among the paradigm push-back with Dialectical Pluralism</title>
      <dc:creator>Tarid Wongvorachan</dc:creator>
      <link>https://taridwong.github.io/posts/2021-11-07-introducing-dialectical-pluralism</link>
      <description>This entry discusses the reconciliation of quantitative and qualitative worldviews amidst the paradigm wars with pluralistic stance.

(2 min read)</description>
      <category>Mixed methods research</category>
      <guid>https://taridwong.github.io/posts/2021-11-07-introducing-dialectical-pluralism</guid>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      <media:content url="https://www.relevantinsights.com/wp-content/uploads/2020/05/Qualitative-Quantitative-Research-For-New-Product-Development.png" medium="image" type="image/png"/>
    </item>
  </channel>
</rss>
